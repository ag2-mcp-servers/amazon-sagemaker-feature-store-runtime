# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:39:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class AccessForbidden(RootModel[Any]):
    root: Any


class DeleteRecordRequest(BaseModel):
    pass


class DeletionMode(Enum):
    SoftDelete = 'SoftDelete'
    HardDelete = 'HardDelete'


class FeatureGroupName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class FeatureName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class FeatureNames(RootModel[List[FeatureName]]):
    root: List[FeatureName] = Field(..., min_length=1)


class GetRecordRequest(BaseModel):
    pass


class InternalFailure(RootModel[Any]):
    root: Any


class Message(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class ResourceNotFound(RootModel[Any]):
    root: Any


class ServiceUnavailable(RootModel[Any]):
    root: Any


class TargetStore(Enum):
    OnlineStore = 'OnlineStore'
    OfflineStore = 'OfflineStore'


class TargetStores(RootModel[List[TargetStore]]):
    root: List[TargetStore] = Field(..., max_length=2, min_length=1)


class ValidationError(RootModel[Any]):
    root: Any


class ValueAsString(RootModel[constr(pattern=r'.*', max_length=358400)]):
    root: constr(pattern=r'.*', max_length=358400)


class FeatureName1(RootModel[List[FeatureName]]):
    root: List[FeatureName] = Field(..., min_length=1)


class BatchGetRecordError(BaseModel):
    ErrorCode: ValueAsString
    ErrorMessage: Message
    FeatureGroupName: ValueAsString
    RecordIdentifierValueAsString: ValueAsString


class BatchGetRecordErrors(RootModel[List[BatchGetRecordError]]):
    root: List[BatchGetRecordError] = Field(..., min_length=0)


class FeatureValue(BaseModel):
    FeatureName_1: FeatureName = Field(..., alias='FeatureName')
    ValueAsString_1: ValueAsString = Field(..., alias='ValueAsString')


class Record(RootModel[List[FeatureValue]]):
    root: List[FeatureValue] = Field(..., min_length=1)


class RecordIdentifiers(RootModel[List[ValueAsString]]):
    root: List[ValueAsString] = Field(..., max_length=100, min_length=1)


class FeatureGroupFeatureGroupNamePutRequest(BaseModel):
    Record: List[FeatureValue] = Field(
        ...,
        description='<p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>',
        min_length=1,
    )
    TargetStores: Optional[List[TargetStore]] = Field(
        None,
        description="A list of stores to which you're adding the record. By default, Feature Store adds the record to all of the stores that you're using for the <code>FeatureGroup</code>.",
        max_length=2,
        min_length=1,
    )


class BatchGetRecordIdentifier(BaseModel):
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureNames_1: Optional[FeatureNames] = Field(None, alias='FeatureNames')
    RecordIdentifiersValueAsString: RecordIdentifiers


class BatchGetRecordIdentifiers(RootModel[List[BatchGetRecordIdentifier]]):
    root: List[BatchGetRecordIdentifier] = Field(..., max_length=10, min_length=1)


class BatchGetRecordRequest(BaseModel):
    Identifiers: BatchGetRecordIdentifiers


class BatchGetRecordResultDetail(BaseModel):
    FeatureGroupName: ValueAsString
    Record_1: Record = Field(..., alias='Record')
    RecordIdentifierValueAsString: ValueAsString


class BatchGetRecordResultDetails(RootModel[List[BatchGetRecordResultDetail]]):
    root: List[BatchGetRecordResultDetail] = Field(..., min_length=0)


class GetRecordResponse(BaseModel):
    Record_1: Optional[Record] = Field(None, alias='Record')


class PutRecordRequest(BaseModel):
    Record_1: Record = Field(..., alias='Record')
    TargetStores_1: Optional[TargetStores] = Field(None, alias='TargetStores')


class UnprocessedIdentifiers(RootModel[List[BatchGetRecordIdentifier]]):
    root: List[BatchGetRecordIdentifier] = Field(..., min_length=0)


class BatchGetRecordPostRequest(BaseModel):
    Identifiers: List[BatchGetRecordIdentifier] = Field(
        ...,
        description='A list of <code>FeatureGroup</code> names, with their corresponding <code>RecordIdentifier</code> value, and Feature name that have been requested to be retrieved in batch.',
        max_length=10,
        min_length=1,
    )


class BatchGetRecordResponse(BaseModel):
    Errors: BatchGetRecordErrors
    Records: BatchGetRecordResultDetails
    UnprocessedIdentifiers_1: UnprocessedIdentifiers = Field(
        ..., alias='UnprocessedIdentifiers'
    )
